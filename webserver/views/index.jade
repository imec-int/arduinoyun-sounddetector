doctype html5
html
	head
		meta(name='viewport', content='initial-scale=1.0, user-scalable=no')
		title MiX Sound Detector
		link(type='text/fonts', rel='stylesheet', src="/vendor/Roboto")
		link(rel='stylesheet', href="/stylesheets/style.css")


	body
		.title MiX Sound Detector
		.menu
		.maincontent



		script(type='text/javascript', src='/socket.io/socket.io.js')
		script(type='text/javascript', src='/vendor/jquery.min.js')
		script(type='text/javascript', src='/vendor/jquery.tmpl.min.js')

		script(type='text/javascript', src='/vendor/underscore-min.js')
		script(type='text/javascript', src='/vendor/backbone-min.js')

		script(type='text/javascript', src='/javascripts/index.js')

		script#channelmenuitem-tmpl(type="text/x-jquery-tmpl")
			.name ${name}
			.soundstate

		script#channelview-tmpl(type="text/x-jquery-tmpl")
			.name ${name}
			br
			.channelnamebox
				input.channelname(type="text", value="${name}", placeholder="Channel Name")
			button.updatechannelname Update Channel Name

			button.activatesoundgraph Activate Sound Graph
			button.deactivatesoundgraph Deactivate Sound Graph
			br
			br
			.soundgraph
				canvas
			.settings
				.soundsettings
					label Sound threshold:
					br
					input.soundThreshold(type='number', value='${soundThreshold}')
				br

				.soundsettings
					label Number of consecutive sound samples before flipping to sound (1 sample = 50ms):
					br
					input.nrOfConsecutiveSoundSamplesBeforeFlippingToSound(type='number', value='${nrOfConsecutiveSoundSamplesBeforeFlippingToSound}')
				br

				.silencesettings
					label Silence threshold:
					br
					input.silenceThreshold(type='number', value='${silenceThreshold}')
				br

				.silencesettings
					label Number of consecutive silence samples before flipping to silence (1 sample = 50ms):
					br
					input.nrOfConsecutiveSilenceSamplesBeforeFlippingToSilence(type='number', value='${nrOfConsecutiveSilenceSamplesBeforeFlippingToSilence}')

				br
				br
			.httpevents
				.title HTTP events:
				.httpevent.onsound_event
					| {{if onsoundevent_enabled}}
					input.enable(type="checkbox", checked="checked")
					| {{else}}
					input.enable(type="checkbox")
					| {{/if}}
					| &nbsp;On Sound:
					br
					.type
						| {{if onsoundevent_type == "post"}}
						input(type="radio", name="onsound_type", value="post", checked="checked")
						| &nbsp;post&nbsp; &nbsp;
						input(type="radio", name="onsound_type", value="put")
						| &nbsp;put
						| {{else}}
						input(type="radio", name="onsound_type", value="post")
						| &nbsp;post&nbsp; &nbsp;
						input(type="radio", name="onsound_type", value="put", checked="checked")
						| &nbsp;put
						| {{/if}}
					input.endpoint(type="text", placeholder="HTTP endpoint", value="${onsoundevent_endpoint}")
					br
					textarea.httpbody(placeholder="This JSON will be sent to the endpoint when sound is detected.") ${onsoundevent_body}
				.httpevent.onsilence_event
					| {{if onsilenceevent_enabled}}
					input.enable(type="checkbox", checked="checked")
					| {{else}}
					input.enable(type="checkbox")
					| {{/if}}
					| &nbsp;On Silence:
					br
					.type
						| {{if onsilenceevent_type == "post"}}
						input(type="radio", name="onsilence_type", value="post", checked="checked")
						| &nbsp;post&nbsp; &nbsp;
						input(type="radio", name="onsilence_type", value="put")
						| &nbsp;put
						| {{else}}
						input(type="radio", name="onsilence_type", value="post")
						| &nbsp;post&nbsp; &nbsp;
						input(type="radio", name="onsilence_type", value="put", checked="checked")
						| &nbsp;put
						| {{/if}}
					input.endpoint(type="text", placeholder="HTTP endpoint", value="${onsilenceevent_endpoint}")
					br
					textarea.httpbody(placeholder="This JSON will be sent to the endpoint when silence is detected.") ${onsilenceevent_body}
				button.savehttpevents(disabled="disabled") Save HTTP events

